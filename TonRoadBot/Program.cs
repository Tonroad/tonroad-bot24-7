using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

var botClient = new TelegramBotClient("7740992334:AAHS2q_ogUV7YW1jPg3b5z9FjLtf6fOojwU");
using var cts = new CancellationTokenSource();

const long AdminId = 5959529178; // —Ç–≤–æ–π Telegram user id

// –•—Ä–∞–Ω–∏–ª–∏—â–µ: –∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ ‚Äî file_id
var userPhotoMap = new ConcurrentDictionary<long, string>();
// –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è: –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞
var pendingSendbacks = new ConcurrentDictionary<long, long>();

botClient.StartReceiving(
    HandleUpdateAsync,
    HandleErrorAsync,
    new ReceiverOptions { AllowedUpdates = { } },
    cancellationToken: cts.Token
);

Console.WriteLine("Bot started. Running until externally stopped.");

await Task.Delay(-1, cts.Token);

async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
{
    if (update.Message is not { } message) return;
    long senderId = message.Chat.Id;

    // 1. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞: /sendback <id>
    if (message.Text != null && message.Text.StartsWith("/sendback") && senderId == AdminId)
    {
        var parts = message.Text.Split(' ');
        if (parts.Length == 2 && long.TryParse(parts[1], out long targetId))
        {
            // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            pendingSendbacks[senderId] = targetId;

            await bot.SendTextMessageAsync(
                chatId: AdminId,
                text: $"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–≥—Ä–æ–∫—É {targetId}.",
                cancellationToken: cancellationToken
            );
        }
        return;
    }

    // 2. –§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –∂–¥—ë–º)
    if (message.Photo != null && message.Photo.Length > 0 && senderId == AdminId)
    {
        if (pendingSendbacks.TryRemove(senderId, out long targetId))
        {
            var photo = message.Photo.Last();

            await bot.SendPhotoAsync(
                chatId: targetId,
                photo: InputFile.FromFileId(photo.FileId),
                caption: "‚úÖ –í–æ—Ç —Ç–≤–æ—ë —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                cancellationToken: cancellationToken
            );

            await bot.SendTextMessageAsync(
                chatId: AdminId,
                text: $"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É {targetId}.",
                cancellationToken: cancellationToken
            );
            return;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∞
        return;
    }

    // 3. –§–æ—Ç–æ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (message.Photo != null && message.Photo.Length > 0)
    {
        // –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–≤–æ–∏ –∂–µ)
        if (senderId == AdminId)
            return;

        var photo = message.Photo.Last(); // —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        string fileId = photo.FileId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –∏–≥—Ä–æ–∫ ‚Üí —Ñ–æ—Ç–æ
        userPhotoMap[senderId] = fileId;

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É
        await bot.SendTextMessageAsync(
            chatId: AdminId,
            text: $"üì∏ –ò–≥—Ä–æ–∫ `{senderId}` –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ.",
            parseMode: ParseMode.Markdown,
            cancellationToken: cancellationToken
        );

        await bot.SendPhotoAsync(
            chatId: AdminId,
            photo: InputFile.FromFileId(fileId),
            caption: $"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n`/sendback {senderId}`",
            parseMode: ParseMode.Markdown,
            cancellationToken: cancellationToken
        );

        return;
    }

    // 4. /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–∞—Ä—Ç—ã
    if (message.Text == "/start")
    {
        var webAppInfo = new WebAppInfo
        {
            Url = "https://tonroad-map.vercel.app"
        };

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            InlineKeyboardButton.WithWebApp("üåç Open TonRoad Map", webAppInfo)
        });

        await bot.SendPhotoAsync(
            chatId: message.Chat.Id,
            photo: InputFile.FromUri("https://raw.githubusercontent.com/tonroad/tonroad-map/main/tonroad_logo.jpg"),
            caption: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TonRoad!\n–ï—Å–ª–∏ —É –≤–∞—Å –ê—Ñ—Ñ–æ–Ω –ø–æ—Ç—è–∏—Ç–µ —ç–∫—Ä–∞–Ω –∫ –≤–µ—Ä—Ö—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤ –¥–æ–±—Ä—ã–π –ø—É—Ç—å.",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken
        );
    }
}

Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken cancellationToken)
{
    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {exception.Message}");
    return Task.CompletedTask;
}
