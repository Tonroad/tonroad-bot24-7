using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InputFiles;
using Telegram.Bot.Types.ReplyMarkups;

var botClient = new TelegramBotClient("–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"); // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
var adminId = 5959529178; // ‚Üê –¢–≤–æ–π Telegram ID

using var cts = new CancellationTokenSource();

botClient.StartReceiving(
    HandleUpdateAsync,
    HandleErrorAsync,
    new ReceiverOptions { AllowedUpdates = { } },
    cancellationToken: cts.Token
);

Console.WriteLine("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è...");

await Task.Delay(-1, cts.Token);

async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
{
    if (update.Message is not { } message)
        return;

    // /start –∫–æ–º–∞–Ω–¥–∞
    if (message.Text == "/start")
    {
        var webAppInfo = new WebAppInfo { Url = "https://tonroad-map.vercel.app" };
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            InlineKeyboardButton.WithWebApp("üåç Open TonRoad Map", webAppInfo)
        });

        await bot.SendPhotoAsync(
            chatId: message.Chat.Id,
            photo: InputFile.FromUri("https://raw.githubusercontent.com/tonroad/tonroad-map/main/tonroad_logo.jpg"),
            caption: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TonRoad!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken
        );
        return;
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    if (message.Photo != null && message.From.Id != adminId)
    {
        await bot.ForwardMessageAsync(
            chatId: adminId,
            fromChatId: message.Chat.Id,
            messageId: message.MessageId,
            cancellationToken: cancellationToken
        );

        Console.WriteLine($"üì∑ –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.From.Id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω—É.");
        return;
    }

    // –ê–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ñ–æ—Ç–æ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (message.Photo != null && message.From.Id == adminId)
    {
        var reply = message.ReplyToMessage;
        if (reply?.ForwardFrom?.Id is long userId)
        {
            var fileId = message.Photo.Last().FileId;

            await bot.SendPhotoAsync(
                chatId: userId,
                photo: new InputOnlineFile(fileId),
                caption: "–í–∞—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ!",
                cancellationToken: cancellationToken
            );

            Console.WriteLine($"üì§ –§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {userId}");
        }
        else
        {
            await bot.SendTextMessageAsync(
                chatId: adminId,
                text: "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ (Reply) –Ω–∞ —Ñ–æ—Ç–æ, –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                cancellationToken: cancellationToken
            );
        }
    }
}

Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken cancellationToken)
{
    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {exception.Message}");
    return Task.CompletedTask;
}
