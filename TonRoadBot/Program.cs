using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InputFiles;

var botClient = new TelegramBotClient("–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"); // –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω
long adminId = 5959529178; // ‚Üê –¢–≤–æ–π Telegram ID

using var cts = new CancellationTokenSource();

botClient.StartReceiving(
    HandleUpdateAsync,
    HandleErrorAsync,
    new ReceiverOptions(),
    cancellationToken: cts.Token
);

Console.WriteLine("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è...");

await Task.Delay(-1, cts.Token);

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
{
    if (update.Message is not { } message) return;

    // 1. –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    if (message.Photo != null && message.From.Id != adminId)
    {
        await bot.ForwardMessageAsync(
            chatId: adminId,
            fromChatId: message.Chat.Id,
            messageId: message.MessageId,
            cancellationToken: cancellationToken
        );

        await bot.SendTextMessageAsync(
            chatId: adminId,
            text: $"üì∑ –§–æ—Ç–æ –æ—Ç –∏–≥—Ä–æ–∫–∞ {message.From.Id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ.",
            cancellationToken: cancellationToken
        );
        return;
    }

    // 2. –ê–¥–º–∏–Ω –ø—Ä–∏—Å–ª–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ (reply) —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ ‚Üí –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –∏–≥—Ä–æ–∫—É
    if (message.Photo != null && message.From.Id == adminId)
    {
        var reply = message.ReplyToMessage;
        if (reply?.ForwardFrom?.Id is long userId)
        {
            string fileId = message.Photo.Last().FileId;

            await bot.SendPhotoAsync(
                chatId: userId,
                photo: new InputOnlineFile(fileId),
                caption: "‚úÖ –í–æ—Ç —Ç–≤–æ—ë –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!",
                cancellationToken: cancellationToken
            );

            await bot.SendTextMessageAsync(
                chatId: adminId,
                text: $"üì§ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É {userId}.",
                cancellationToken: cancellationToken
            );
        }
        else
        {
            await bot.SendTextMessageAsync(
                chatId: adminId,
                text: "‚ùå –°–¥–µ–ª–∞–π *Reply* –Ω–∞ —Ñ–æ—Ç–æ –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                parseMode: ParseMode.Markdown,
                cancellationToken: cancellationToken
            );
        }
        return;
    }

    // 3. /start
    if (message.Text == "/start")
    {
        var webAppInfo = new WebAppInfo { Url = "https://tonroad-map.vercel.app" };
        var keyboard = new InlineKeyboardMarkup(
            InlineKeyboardButton.WithWebApp("üåç –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", webAppInfo)
        );

        await bot.SendPhotoAsync(
            chatId: message.Chat.Id,
            photo: InputFile.FromUri("https://raw.githubusercontent.com/tonroad/tonroad-map/main/tonroad_logo.jpg"),
            caption: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TonRoad!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken
        );
    }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken cancellationToken)
{
    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {exception.Message}");
    return Task.CompletedTask;
}
