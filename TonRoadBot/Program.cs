using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

var botClient = new TelegramBotClient("7683388439:AAE2WgG4QmcZJpl-HwSi0QcToe9q3YNtAEw");
var adminId = 5959529178L;
var userLastPhoto = new ConcurrentDictionary<long, string>();

using var cts = new CancellationTokenSource();

botClient.StartReceiving(
    HandleUpdateAsync,
    HandleErrorAsync,
    new ReceiverOptions { AllowedUpdates = Array.Empty<UpdateType>() },
    cancellationToken: cts.Token
);

Console.WriteLine("Bot started.");
await Task.Delay(-1, cts.Token);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤
async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
{
    if (update.Message is not { } message)
        return;

    var userId = message.From.Id;

    // –ü—Ä–∏–Ω—è—Ç–æ —Ñ–æ—Ç–æ –æ—Ç –∏–≥—Ä–æ–∫–∞
    if (message.Photo is not null && userId != adminId)
    {
        var largestPhoto = message.Photo.OrderByDescending(p => p.FileSize).First();
        var fileId = largestPhoto.FileId;

        userLastPhoto[userId] = fileId;

        await bot.SendPhotoAsync(
            chatId: adminId,
            photo: InputFile.FromFileId(fileId),
            caption: $"üì∑ –ü—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ –æ—Ç –∏–≥—Ä–æ–∫–∞ {userId}.\n\n" +
                     $"–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏ –µ–≥–æ –∏ –∫–æ–º–∞–Ω–¥—É:\n/sendback {userId}",
            cancellationToken: cancellationToken
        );

        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∞–¥–º–∏–Ω–∞
    if (message.Text != null && message.Text.StartsWith("/sendback") && userId == adminId)
    {
        var parts = message.Text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length < 2 || !long.TryParse(parts[1], out long targetUserId))
        {
            await bot.SendTextMessageAsync(adminId, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendback <user_id>", cancellationToken: cancellationToken);
            return;
        }

        if (!userLastPhoto.ContainsKey(targetUserId))
        {
            await bot.SendTextMessageAsync(adminId, "‚ö†Ô∏è –ù–µ—Ç —Ñ–æ—Ç–æ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", cancellationToken: cancellationToken);
            return;
        }

        if (message.Photo is null)
        {
            await bot.SendTextMessageAsync(adminId, "‚ùó –ü—Ä–∏–∫—Ä–µ–ø–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∫ –∫–æ–º–∞–Ω–¥–µ /sendback", cancellationToken: cancellationToken);
            return;
        }

        var photoToSend = message.Photo.OrderByDescending(p => p.FileSize).First().FileId;

        await bot.SendPhotoAsync(
            chatId: targetUserId,
            photo: InputFile.FromFileId(photoToSend),
            caption: "üñº –í–æ—Ç –≤–∞—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!",
            cancellationToken: cancellationToken
        );

        await bot.SendTextMessageAsync(adminId, $"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É {targetUserId}", cancellationToken: cancellationToken);
        return;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∏–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
    if (message.Text == "/start")
    {
        var webAppInfo = new WebAppInfo { Url = "https://tonroad-map.vercel.app" };

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            InlineKeyboardButton.WithWebApp("üåç –û—Ç–∫—Ä—ã—Ç—å TonRoad Map", webAppInfo)
        });

        await bot.SendPhotoAsync(
            chatId: userId,
            photo: InputFile.FromUri("https://raw.githubusercontent.com/tonroad/tonroad-map/main/tonroad_logo.jpg"),
            caption: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TonRoad!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken
        );
    }
}

// –û—à–∏–±–∫–∏
Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken cancellationToken)
{
    Console.WriteLine($"–û—à–∏–±–∫–∞: {exception.Message}");
    return Task.CompletedTask;
}
