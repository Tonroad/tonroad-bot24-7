using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

var botClient = new TelegramBotClient("7740992334:AAHS2q_ogUV7YW1jPg3b5z9FjLtf6fOojwU");

using var cts = new CancellationTokenSource();

var userMap = new Dictionary<int, long>(); // messageId -> original userId

botClient.StartReceiving(
    HandleUpdateAsync,
    HandleErrorAsync,
    new ReceiverOptions { AllowedUpdates = { } },
    cancellationToken: cts.Token
);

Console.WriteLine("Bot started. Running until externally stopped.");
await Task.Delay(-1, cts.Token);

// ------------------ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ------------------

async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
{
    var message = update.Message;
    if (message == null) return;

    // –ò–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start
    if (message.Text == "/start")
    {
        var webAppInfo = new WebAppInfo
        {
            Url = "https://tonroad-map.vercel.app"
        };

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            InlineKeyboardButton.WithWebApp("üåç Open TonRoad Map", webAppInfo)
        });

        await bot.SendPhotoAsync(
            chatId: message.Chat.Id,
            photo: InputFile.FromUri("https://raw.githubusercontent.com/tonroad/tonroad-map/main/tonroad_logo.jpg"),
            caption: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TonRoad!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken
        );
    }

    // –§–æ—Ç–æ –æ—Ç –∏–≥—Ä–æ–∫–∞ ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É (—Ç–µ–±–µ)
    else if (message.Photo != null && message.Chat.Id != 5959529178)
    {
        var fileId = message.Photo.Last().FileId;

        userMap[message.MessageId] = message.Chat.Id;

        await bot.SendTextMessageAsync(
            chatId: 5959529178,
            text: $"üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç @{message.Chat.Username ?? "–±–µ–∑ –Ω–∏–∫–∞"} (ID: {message.Chat.Id})"
        );

        await bot.SendPhotoAsync(
            chatId: 5959529178,
            photo: InputFile.FromFileId(fileId),
            caption: $"üîÅ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤–∏–¥–∞:\n`reply {message.MessageId}`",
            parseMode: ParseMode.Markdown,
            cancellationToken: cancellationToken
        );
    }

    // –¢—ã (–∞–¥–º–∏–Ω) –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ –∏–≥—Ä–æ–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é "reply 123"
    else if (message.Photo != null && message.Chat.Id == 5959529178 && message.Caption?.StartsWith("reply ") == true)
    {
        var parts = message.Caption.Split(' ');
        if (parts.Length >= 2 && int.TryParse(parts[1], out int replyId) && userMap.TryGetValue(replyId, out long originalUserId))
        {
            await bot.SendPhotoAsync(
                chatId: originalUserId,
                photo: InputFile.FromFileId(message.Photo.Last().FileId),
                caption: "–í–æ—Ç –≤–∞—à –º—É–ª—å—Ç—è—à–Ω—ã–π –∞–≤–∞—Ç–∞—Ä! –°–ø–∞—Å–∏–±–æ üòé",
                cancellationToken: cancellationToken
            );

            await bot.SendTextMessageAsync(
                chatId: 5959529178,
                text: "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É."
            );
        }
        else
        {
            await bot.SendTextMessageAsync(
                chatId: 5959529178,
                text: "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ message ID."
            );
        }
    }
}

// ------------------ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ------------------

Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken cancellationToken)
{
    Console.WriteLine($"–û—à–∏–±–∫–∞: {exception.Message}");
    return Task.CompletedTask;
}
