using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

var botClient = new TelegramBotClient("7740992334:AAHS2q_ogUV7YW1jPg3b5z9FjLtf6fOojwU");

using var cts = new CancellationTokenSource();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: –∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ ‚Äî –∫–∞–∫–æ–π file_id
var userPhotoMap = new ConcurrentDictionary<long, string>();

botClient.StartReceiving(
    HandleUpdateAsync,
    HandleErrorAsync,
    new ReceiverOptions { AllowedUpdates = { } },
    cancellationToken: cts.Token
);

Console.WriteLine("Bot started. Running until externally stopped.");

await Task.Delay(-1, cts.Token);

async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
{
    if (update.Message is not { } message) return;

    long senderId = message.Chat.Id;

    // –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ
    if (message.Photo != null && message.Photo.Length > 0)
    {
        var photo = message.Photo.Last(); // —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        string fileId = photo.FileId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –∏–≥—Ä–æ–∫ ‚Üí —Ñ–æ—Ç–æ
        userPhotoMap[senderId] = fileId;

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ —Ç–µ–±–µ (5959529178)
        await bot.SendTextMessageAsync(
            chatId: 5959529178,
            text: $"üì∏ –ò–≥—Ä–æ–∫ `{senderId}` –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ.",
            parseMode: ParseMode.Markdown,
            cancellationToken: cancellationToken
        );

        await bot.SendPhotoAsync(
            chatId: 5959529178,
            photo: InputFile.FromFileId(fileId),
            caption: $"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n`/sendback {senderId}`",
            parseMode: ParseMode.Markdown,
            cancellationToken: cancellationToken
        );

        return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ –æ—Ç —Ç–µ–±—è: /sendback <id>
    if (message.Text != null && message.Text.StartsWith("/sendback"))
    {
        var parts = message.Text.Split(' ');
        if (parts.Length == 2 && long.TryParse(parts[1], out long targetId))
        {
            if (userPhotoMap.TryGetValue(targetId, out string fileId))
            {
                await bot.SendPhotoAsync(
                    chatId: targetId,
                    photo: InputFile.FromFileId(fileId),
                    caption: "‚úÖ –í–æ—Ç —Ç–≤–æ—ë –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!",
                    cancellationToken: cancellationToken
                );

                await bot.SendTextMessageAsync(
                    chatId: 5959529178,
                    text: "–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ –∏–≥—Ä–æ–∫—É.",
                    cancellationToken: cancellationToken
                );
            }
            else
            {
                await bot.SendTextMessageAsync(
                    chatId: 5959529178,
                    text: "‚ùå –§–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    cancellationToken: cancellationToken
                );
            }
        }
    }

    // /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–∞—Ä—Ç—ã
    if (message.Text == "/start")
    {
        var webAppInfo = new WebAppInfo
        {
            Url = "https://tonroad-map.vercel.app"
        };

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            InlineKeyboardButton.WithWebApp("üåç Open TonRoad Map", webAppInfo)
        });

        await bot.SendPhotoAsync(
            chatId: message.Chat.Id,
            photo: InputFile.FromUri("https://raw.githubusercontent.com/tonroad/tonroad-map/main/tonroad_logo.jpg"),
            caption: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TonRoad!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken
        );
    }
}

Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken cancellationToken)
{
    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {exception.Message}");
    return Task.CompletedTask;
}
