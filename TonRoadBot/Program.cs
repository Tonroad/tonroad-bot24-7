using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InputFiles;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

var botClient = new TelegramBotClient("–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"); // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω
var adminId = 5959529178; // –¢–≤–æ–π Telegram ID

using var cts = new CancellationTokenSource();
var userPhotoMap = new ConcurrentDictionary<long, string>();

botClient.StartReceiving(
    HandleUpdateAsync,
    HandleErrorAsync,
    new ReceiverOptions { AllowedUpdates = { } },
    cancellationToken: cts.Token
);

Console.WriteLine("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è...");
await Task.Delay(-1, cts.Token);

async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
{
    if (update.Message is not { } message)
        return;

    long senderId = message.Chat.Id;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (message.Text == "/start")
    {
        var webAppInfo = new WebAppInfo
        {
            Url = "https://tonroad-map.vercel.app"
        };

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            InlineKeyboardButton.WithWebApp("üåç Open TonRoad Map", webAppInfo)
        });

        await bot.SendPhotoAsync(
            chatId: senderId,
            photo: InputFile.FromUri("https://raw.githubusercontent.com/tonroad/tonroad-map/main/tonroad_logo.jpg"),
            caption: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TonRoad!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken
        );
        return;
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
    if (message.Photo is not null && senderId != adminId)
    {
        var fileId = message.Photo.Last().FileId;
        userPhotoMap[senderId] = fileId;

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID –≤ caption)
        await bot.SendPhotoAsync(
            chatId: adminId,
            photo: InputFile.FromFileId(fileId),
            caption: $"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n/sendback {senderId}",
            parseMode: ParseMode.Markdown,
            cancellationToken: cancellationToken
        );

        Console.WriteLine($"üì∑ –§–æ—Ç–æ –æ—Ç {senderId} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω—É");
        return;
    }

    // –ê–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å caption /sendback <id>
    if (message.Photo != null && senderId == adminId && message.ReplyToMessage != null)
    {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å userId –∏–∑ caption
        var caption = message.ReplyToMessage.Caption;
        if (!string.IsNullOrEmpty(caption))
        {
            var parts = caption.Split(' ');
            var idPart = parts.LastOrDefault();
            if (long.TryParse(idPart, out long userId))
            {
                var fileId = message.Photo.Last().FileId;

                await bot.SendPhotoAsync(
                    chatId: userId,
                    photo: InputFile.FromFileId(fileId),
                    caption: "‚úÖ –í–∞—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!",
                    cancellationToken: cancellationToken
                );

                Console.WriteLine($"üì§ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {userId}");
                return;
            }
        }

        await bot.SendTextMessageAsync(
            chatId: adminId,
            text: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –µ—Å—Ç—å caption /sendback <id>.",
            cancellationToken: cancellationToken
        );
    }

    // –ö–æ–º–∞–Ω–¥–∞ /sendback <id> –≤—Ä—É—á–Ω—É—é
    if (message.Text != null && message.Text.StartsWith("/sendback"))
    {
        var parts = message.Text.Split(' ');
        if (parts.Length == 2 && long.TryParse(parts[1], out long targetId))
        {
            if (userPhotoMap.TryGetValue(targetId, out string photoFileId))
            {
                await bot.SendPhotoAsync(
                    chatId: targetId,
                    photo: InputFile.FromFileId(photoFileId),
                    caption: "‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ!",
                    cancellationToken: cancellationToken
                );

                await bot.SendTextMessageAsync(
                    chatId: adminId,
                    text: $"üì§ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {targetId}.",
                    cancellationToken: cancellationToken
                );
            }
            else
            {
                await bot.SendTextMessageAsync(
                    chatId: adminId,
                    text: "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                    cancellationToken: cancellationToken
                );
            }
        }
    }
}

Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken cancellationToken)
{
    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {exception.Message}");
    return Task.CompletedTask;
}
