using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InputFiles;
using System.Collections.Concurrent;

class Program
{
    private static TelegramBotClient botClient;

    // ‚Üê –í–°–¢–ê–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï
    private static readonly string token = "7683388439:AAE2WgG4QmcZJpl-HwSi0QcToe9q3YNtAEw";
    private static readonly long adminId = 5398102470;

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ (userId -> fileId)
    private static ConcurrentDictionary<long, string> latestPhotos = new();

    static async Task Main(string[] args)
    {
        botClient = new TelegramBotClient(token);
        var me = await botClient.GetMeAsync();
        Console.WriteLine($"‚úÖ –ë–æ—Ç {me.Username} –∑–∞–ø—É—â–µ–Ω!");

        botClient.OnMessage += OnMessageReceived;
        botClient.StartReceiving();

        Console.ReadLine();
        botClient.StopReceiving();
    }

    private static async void OnMessageReceived(object sender, MessageEventArgs e)
    {
        var msg = e.Message;
        if (msg == null) return;

        // –ö–æ–º–∞–Ω–¥–∞ /sendback
        if (msg.Text != null && msg.Text.StartsWith("/sendback"))
        {
            if (msg.From.Id != adminId)
            {
                await botClient.SendTextMessageAsync(msg.Chat.Id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã.");
                return;
            }

            var parts = msg.Text.Split(' ');
            if (parts.Length < 2 || !long.TryParse(parts[1], out long targetUserId))
            {
                await botClient.SendTextMessageAsync(msg.Chat.Id, "‚ùå –§–æ—Ä–º–∞—Ç: /sendback <userId>");
                return;
            }

            if (latestPhotos.TryGetValue(adminId, out string adminPhoto))
            {
                await botClient.SendPhotoAsync(
                    chatId: targetUserId,
                    photo: new InputOnlineFile(adminPhoto),
                    caption: "üì© –§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞.");
                await botClient.SendTextMessageAsync(adminId, $"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É {targetUserId}.");
            }
            else
            {
                await botClient.SendTextMessageAsync(adminId, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.");
            }

            return;
        }

        // –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ
        if (msg.Photo != null && msg.Photo.Length > 0)
        {
            var photo = msg.Photo.OrderByDescending(p => p.FileSize).First();
            latestPhotos[msg.From.Id] = photo.FileId;

            if (msg.From.Id == adminId)
            {
                await botClient.SendTextMessageAsync(adminId, "‚úÖ –§–æ—Ç–æ –∞–¥–º–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /sendback <userId>.");
            }
            else
            {
                string caption = $"üì∏ –ò–≥—Ä–æ–∫ {msg.From.Id} –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ.\n\n–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n/sendback {msg.From.Id}";
                await botClient.SendPhotoAsync(adminId, new InputOnlineFile(photo.FileId), caption: caption);
            }
        }
    }
}
