using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.InputFiles;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

var botClient = new TelegramBotClient("7740992334:AAHS2q_ogUV7YW1jPg3b5z9FjLtf6fOojwU");
using var cts = new CancellationTokenSource();

// ID –∞–¥–º–∏–Ω–∞
const long adminId = 5959529178;

botClient.StartReceiving(
    HandleUpdateAsync,
    HandleErrorAsync,
    new ReceiverOptions { AllowedUpdates = { } },
    cancellationToken: cts.Token
);

Console.WriteLine("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ —Ñ–æ—Ç–æ...");

await Task.Delay(-1, cts.Token);

async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
{
    try
    {
        if (update.Message is not { } message)
            return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if (message.Text == "/start")
        {
            var webAppInfo = new WebAppInfo
            {
                Url = "https://tonroad-map.vercel.app"
            };

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                InlineKeyboardButton.WithWebApp("üåç Open TonRoad Map", webAppInfo)
            });

            await bot.SendPhotoAsync(
                chatId: message.Chat.Id,
                photo: InputFile.FromUri("https://raw.githubusercontent.com/tonroad/tonroad-map/main/tonroad_logo.jpg"),
                caption: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TonRoad!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.",
                replyMarkup: keyboard,
                cancellationToken: cancellationToken
            );
            return;
        }

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
        if (message.Text == "/whoami")
        {
            await bot.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: $"üÜî –í–∞—à Telegram ID: `{message.From.Id}`",
                parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown,
                cancellationToken: cancellationToken
            );
            return;
        }

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        if (message.Photo != null && message.From.Id != adminId)
        {
            var fileId = message.Photo[^1].FileId;

            await bot.ForwardMessageAsync(
                chatId: adminId,
                fromChatId: message.Chat.Id,
                messageId: message.MessageId,
                cancellationToken: cancellationToken
            );

            Console.WriteLine($"üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç {message.From.Id} –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω—É.");
            return;
        }

        // –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç (reply)
        if (message.Photo != null && message.From.Id == adminId && message.ReplyToMessage?.ForwardFrom != null)
        {
            var targetUserId = message.ReplyToMessage.ForwardFrom.Id;

            var fileId = message.Photo[^1].FileId;

            await bot.SendPhotoAsync(
                chatId: targetUserId,
                photo: new InputOnlineFile(fileId),
                caption: "–í–æ—Ç –≤–∞—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!",
                cancellationToken: cancellationToken
            );

            Console.WriteLine($"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {targetUserId}");
            return;
        }

        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç–æ–º
        if (message.Photo != null && message.From.Id == adminId && message.ReplyToMessage == null)
        {
            await bot.SendTextMessageAsync(
                chatId: adminId,
                text: "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é \"–û—Ç–≤–µ—Ç–∏—Ç—å\" –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                cancellationToken: cancellationToken
            );
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
    }
}

Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken cancellationToken)
{
    Console.WriteLine($"‚ùå Global Error: {exception.Message}");
    return Task.CompletedTask;
}
